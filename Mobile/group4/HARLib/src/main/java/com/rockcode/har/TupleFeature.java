package com.rockcode.har;

import java.util.List;

/**
 * WISDM Server Program http://www.cis.fordham.edu/wisdm/
 * 
 * This class holds the results of tuple feature generation from the
 * WisdmFeatureThread. to prevent corruption from concurrency all functions
 * handling arrays copy them member by member to new arrays.
 * 
 * @author Jeff Lockhart <a href="mailto:lockhart@cis.fordham.edu">lockhart@cis.fordham.edu</a>
 * @version 2.3.0
 * @date 16 June 2012
 */

public class TupleFeature {

	/**
	 * the number of floating point features
	 */
	public static final int FEATURES_NUM = 43;
	
	/**
	 * max number of records in a tuple
	 * function of window size  and sampling rate (old is 200)
	 */
	public static final int mRecordNumber = 200;

	/**
	 * the user for this tuple
	 */
	private String mUserid = "0";

	/**
	 * holds all of the features generated by feature generation in floating
	 * point values the order is determined by the feature thread
	 */
	private float[] mFeatures = null;

	/**
	 * the number of samples in the tuple
	 */
	private int mCount = 0;

	/**
	 * start timestamp(first sensor data timestamp)
	 */
	private long mStartTime = 0;
	
	/**
	 * the activity for this tuple
	 */
	private String mActivity = HumanActivity.ACTIVITY_NOLABEL;
	
	/**
	 * indicates whether the raw values have been set.
	 */
	private boolean mIsRawDataSet = false;

	/**
	 * all x axis value in rawdata list
	 */
	private float[] mXAxisValues = null;

	/**
	 * all y axis value in rawdata list
	 */
	private float[] mYAxisValues = null;

	/**
	 * all z axis value in rawdata list
	 */
	private float[] mZAxisValues = null;

	/**
	 * all timestamp in rawdata list
	 */
	private long[] mTimeStamps = null;
	
	/**
	 * constructor
	 * @param userid userid, current just use in save to arff file
	 * @param activity target activity
	 * @param startTime first time in tuple
	 */
	public TupleFeature(String userid, String activity, long startTime) {
		mUserid = userid;
		mActivity = activity;
		mStartTime = startTime;	
	}
	
	/**
	 * standard toString() function, only includes features
	 */
	public String toString(){
		String s = "";
		s += mUserid;
		s += ",";
		s += mStartTime;
		for(int i = 0; i < FEATURES_NUM; i++){
			s += ",";
			s += mFeatures[i];
		}
		s += ",";
		s += mActivity;
		s += ";\n";
		return s;
	}

	/**
	 * sets the feature values for this tuple
	 * @param f must be in proper order
	 */
	public synchronized void setFeatures(float[] f) {
		mFeatures = new float[f.length];
		System.arraycopy(f, 0, mFeatures, 0, f.length);
	}

	/**
	 * get the floating point features
	 * @return array of feature
	 */
	public synchronized float[] getFeatures() {
		return mFeatures;
	}

	/**
	 * get start time
	 * @return unix timestamp
	 */
	public synchronized long getStartTime() {
		return mStartTime;
	}

	/**
	 * get target activity
	 * @return Activity: NoLabel, Walking, Jogging, Cycling, Stairs, Standing
	 */
	public synchronized String getActivity() {
		return mActivity;
	}

	/**
	 * set target activity
	 * @param activity Activity: NoLabel, Walking, Jogging, Cycling, Stairs, Standing
	 */
	public void setActivity(String activity) {
		mActivity = activity;
	}

	/**
	 * get userid
	 * @return userid
	 */
	public String getUserId() {
		return mUserid;
	}

	/**
	 * set RawData List
	 * @param rawDataList RawData list
	 */
	public synchronized void setRawData(List<RawData> rawDataList) {
		int len = rawDataList.size();
		mXAxisValues = new float[len];
		mYAxisValues = new float[len];
		mZAxisValues = new float[len];
		mTimeStamps = new long[len];
		for (int i = 0; i < len; i++) {
			mXAxisValues[i] = rawDataList.get(i).mXAxisValue;
			mYAxisValues[i] = rawDataList.get(i).mYAxisValue;
			mZAxisValues[i] = rawDataList.get(i).mZAxisValue;
			mTimeStamps[i] = rawDataList.get(i).mTimeStamp;
		}
		mCount = len;
		mIsRawDataSet = true;
		setCount(rawDataList.size());
	}
	
	/**
	 * copies the raw sensor data into the tupfeat object
	 * @param xi array of x axis data
	 * @param yi array of y axis data
	 * @param zi array of z axis data
	 * @param ti array of timestamp
	 */
	public synchronized void setRawData(float[] xi, float[] yi, float[] zi,
			long[] ti) {
		mXAxisValues = new float[xi.length];
		mYAxisValues = new float[yi.length];
		mZAxisValues = new float[zi.length];
		mTimeStamps = new long[ti.length];
		for (int i = 0; i < xi.length; i++) {
			mXAxisValues[i] = xi[i];
			mYAxisValues[i] = yi[i];
			mZAxisValues[i] = zi[i];
			mTimeStamps[i] = ti[i];
		}
		mCount = xi.length;
		mIsRawDataSet = true;
	}

	/**
	 * sets the rawdata count, after some out-of-bounds checking
	 * @param c the count of rawdata
	 */
	public synchronized void setCount(int c) {
		if (c < 0) {
			mCount = 0;
		} else if (c < mRecordNumber) {
			mCount = c;
		} else {
			mCount = mRecordNumber;
		}
	}

	/**
	 * get rawdata count
	 * @return count
	 */
	public synchronized int getCount() {
		return mCount;
	}

	/**
	 * copies an array of raw x values out of the tupfeat object
	 * @return array
	 */
	public synchronized float[] getX() {
		float[] xo = new float[mXAxisValues.length];
		System.arraycopy(mXAxisValues, 0, xo, 0, mXAxisValues.length);
		return xo;
	}

	/**
	 * copies an array of y values out of the tupfeat object
	 * @return array
	 */
	public synchronized float[] getY() {
		float[] yo = new float[mYAxisValues.length];
		System.arraycopy(mYAxisValues, 0, yo, 0, mYAxisValues.length);
		return yo;
	}

	/**
	 * copies an array of z values out of the tupfeat object
	 * @return array
	 */
	public synchronized float[] getZ() {
		float[] zo = new float[mZAxisValues.length];
		System.arraycopy(mZAxisValues, 0, zo, 0, mZAxisValues.length);
		return zo;
	}

	/**
	 * copies an array of timestamp values out of a tupfeat object
	 * @return array
	 */
	public synchronized long[] getT() {
		long[] to = new long[mTimeStamps.length];
		System.arraycopy(mTimeStamps, 0, to, 0, mTimeStamps.length);
		return to;
	}

	/**
	 * converts float arrays to double arrays
	 * @param f float array
	 * @return double array
	 */
	public static double[] toDoubles(float[] f){
		double[] d = new double[f.length];
		
		for(int i = 0; i < f.length; i++){
			d[i] = f[i];
		}
		
		return d;
	}
	
	/**
	 * sets the raw data arrays in the object to null to free memory
	 */
	public synchronized void killRawData() {
		mXAxisValues = null;
		mYAxisValues = null;
		mZAxisValues = null;
		mTimeStamps = null;
		mIsRawDataSet = false;
	}
	
	/**
	 * has rawdata been set?
	 * @return true or false
	 */
	public synchronized boolean isRawDataSet(){
		return mIsRawDataSet;
	}
	
}
